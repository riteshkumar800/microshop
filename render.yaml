# Render Blueprint: one-click deploy for Microshop (all FREE)
services:
  # Public gateway: serves UI and proxies /api/*
  - type: web
    name: microshop-gateway
    env: docker
    plan: free
    autoDeploy: true
    rootDir: gateway
    dockerfilePath: ./gateway/Dockerfile
    healthCheckPath: /
    envVars:
      # Inject the live URLs of your backends into the gateway at deploy time
      - key: PRODUCT_BASE
        fromService:
          name: product-service
          type: web
          property: url
      - key: USER_BASE
        fromService:
          name: user-service
          type: web
          property: url
      - key: ORDER_BASE
        fromService:
          name: order-service
          type: web
          property: url

  # Product service (uses SQLite on Render to avoid DB limits)
  - type: web
    name: product-service
    env: docker
    plan: free
    autoDeploy: true
    rootDir: product-service
    dockerfilePath: ./product-service/Dockerfile
    healthCheckPath: /
    envVars:
      # Use SQLite (async). If your code is sync SQLAlchemy, use sqlite:///data.db
      - key: DATABASE_URL
        value: sqlite+aiosqlite:///data.db

  # User service
  - type: web
    name: user-service
    env: docker
    plan: free
    autoDeploy: true
    rootDir: user-service
    dockerfilePath: ./user-service/Dockerfile
    healthCheckPath: /

  # Order service (needs the Product URL)
  - type: web
    name: order-service
    env: docker
    plan: free
    autoDeploy: true
    rootDir: order-service
    dockerfilePath: ./order-service/Dockerfile
    healthCheckPath: /
    envVars:
      - key: PRODUCT_SERVICE_URL
        fromService:
          name: product-service
          type: web
          property: url

  # Payment service (dummy)
  - type: web
    name: payment-service
    env: docker
    plan: free
    autoDeploy: true
    rootDir: payment-service
    dockerfilePath: ./payment-service/Dockerfile
    healthCheckPath: /
